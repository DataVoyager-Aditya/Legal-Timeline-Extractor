
import json
import os
from pathlib import Path
from typing import Dict, Any, List
import logging

class Config:
    """
    Configuration management for AI Legal Timeline Builder.
    Handles settings, API keys, and system preferences.
    """

    def __init__(self):
        """Initialize configuration with defaults"""
        self.logger = logging.getLogger(__name__)
        self.config_dir = Path.home() / ".ai_legal_timeline"
        self.config_file = self.config_dir / "config.json"

        # Ensure config directory exists
        self.config_dir.mkdir(exist_ok=True)

        # Default settings
        self.default_settings = {
            "huggingface_token": "",
            "default_model": "nlpaueb/legal-bert-base-uncased",
            "confidence_threshold": 0.5,
            "max_events": 100,
            "fuzzy_matching": True,
            "ocr_languages": ["eng", "hin"],
            "image_preprocessing": True,
            "ocr_confidence": 0.7,
            "include_confidence": True,
            "include_metadata": True,
            "include_evidence": True,
            "watermark_reports": False,
            "custom_footer": "Generated by AI Legal Timeline Builder Pro"
        }

        # Load existing settings
        self.settings = self.load_settings()

    def load_settings(self) -> Dict[str, Any]:
        """Load settings from configuration file"""
        try:
            if self.config_file.exists():
                with open(self.config_file, 'r') as f:
                    saved_settings = json.load(f)

                # Merge with defaults to ensure all keys exist
                settings = self.default_settings.copy()
                settings.update(saved_settings)
                return settings
            else:
                return self.default_settings.copy()

        except Exception as e:
            self.logger.error(f"Error loading settings: {e}")
            return self.default_settings.copy()

    def save_settings(self):
        """Save current settings to configuration file"""
        try:
            with open(self.config_file, 'w') as f:
                json.dump(self.settings, f, indent=2)
            self.logger.info("Settings saved successfully")
        except Exception as e:
            self.logger.error(f"Error saving settings: {e}")

    def get_huggingface_token(self) -> str:
        """Get Hugging Face API token"""
        # Check environment variable first
        env_token = os.getenv('HF_TOKEN') or os.getenv('HUGGINGFACE_TOKEN')
        if env_token:
            return env_token

        # Check .env file
        env_file = Path('.env')
        if env_file.exists():
            try:
                with open(env_file, 'r') as f:
                    for line in f:
                        if line.startswith('HF_TOKEN='):
                            return line.split('=', 1)[1].strip()
            except Exception:
                pass

        # Return from settings
        return self.settings.get("huggingface_token", "")

    def set_huggingface_token(self, token: str):
        """Set Hugging Face API token"""
        self.settings["huggingface_token"] = token
        self.save_settings()

        # Also save to .env file
        try:
            env_file = Path('.env')
            env_content = ""

            if env_file.exists():
                with open(env_file, 'r') as f:
                    lines = f.readlines()

                # Update existing HF_TOKEN line or add new one
                token_updated = False
                for i, line in enumerate(lines):
                    if line.startswith('HF_TOKEN='):
                        lines[i] = f"HF_TOKEN={token}\n"
                        token_updated = True
                        break

                env_content = ''.join(lines)
                if not token_updated:
                    env_content += f"\nHF_TOKEN={token}\n"
            else:
                env_content = f"HF_TOKEN={token}\n"

            with open(env_file, 'w') as f:
                f.write(env_content)

        except Exception as e:
            self.logger.error(f"Error saving token to .env file: {e}")

    def get_default_model(self) -> str:
        """Get default Legal-BERT model"""
        return self.settings.get("default_model", "nlpaueb/legal-bert-base-uncased")

    def set_default_model(self, model: str):
        """Set default Legal-BERT model"""
        self.settings["default_model"] = model
        self.save_settings()

    def get_confidence_threshold(self) -> float:
        """Get confidence threshold"""
        return self.settings.get("confidence_threshold", 0.5)

    def get_max_events(self) -> int:
        """Get maximum events per document"""
        return self.settings.get("max_events", 100)

    def get_fuzzy_matching(self) -> bool:
        """Get fuzzy matching setting"""
        return self.settings.get("fuzzy_matching", True)

    def get_ocr_languages(self) -> List[str]:
        """Get OCR languages"""
        return self.settings.get("ocr_languages", ["eng", "hin"])

    def get_image_preprocessing(self) -> bool:
        """Get image preprocessing setting"""
        return self.settings.get("image_preprocessing", True)

    def get_ocr_confidence(self) -> float:
        """Get OCR confidence threshold"""
        return self.settings.get("ocr_confidence", 0.7)

    def get_include_confidence(self) -> bool:
        """Get include confidence setting"""
        return self.settings.get("include_confidence", True)

    def get_include_metadata(self) -> bool:
        """Get include metadata setting"""
        return self.settings.get("include_metadata", True)

    def get_include_evidence(self) -> bool:
        """Get include evidence setting"""
        return self.settings.get("include_evidence", True)

    def get_watermark_reports(self) -> bool:
        """Get watermark reports setting"""
        return self.settings.get("watermark_reports", False)

    def get_custom_footer(self) -> str:
        """Get custom footer text"""
        return self.settings.get("custom_footer", "Generated by AI Legal Timeline Builder Pro")

    def get_available_models(self) -> List[str]:
        """Get list of available Legal-BERT models"""
        return [
            "nlpaueb/legal-bert-base-uncased",
            "law-ai/InLegalBERT", 
            "pile-of-law/legalbert-large-1.7M-2"
        ]

    def update_settings(self, new_settings: Dict[str, Any]):
        """Update multiple settings at once"""
        self.settings.update(new_settings)
        self.save_settings()

    def reset_to_defaults(self):
        """Reset all settings to defaults"""
        self.settings = self.default_settings.copy()
        self.save_settings()

    def export_settings(self) -> str:
        """Export settings as JSON string"""
        return json.dumps(self.settings, indent=2)

    def import_settings(self, settings_json: str):
        """Import settings from JSON string"""
        try:
            imported_settings = json.loads(settings_json)
            self.settings.update(imported_settings)
            self.save_settings()
            return True
        except Exception as e:
            self.logger.error(f"Error importing settings: {e}")
            return False

    def get_legal_event_patterns(self) -> List[Dict[str, str]]:
        """Get legal event patterns for timeline extraction"""
        return [
            {"pattern": r"(?:FIR|First Information Report).*?(?:filed|registered|lodged)", "type": "FIR_FILED"},
            {"pattern": r"(?:arrest|arrested|apprehended).*?(?:accused|suspect|defendant)", "type": "ARREST"},
            {"pattern": r"(?:charge|charged|chargesheet).*?(?:filed|submitted)", "type": "CHARGES_FILED"},
            {"pattern": r"(?:bail|anticipatory bail).*?(?:granted|rejected|applied)", "type": "BAIL_APPLICATION"},
            {"pattern": r"(?:hearing|proceeding|case).*?(?:scheduled|adjourned|postponed)", "type": "HEARING_SCHEDULED"},
            {"pattern": r"(?:judgment|order|verdict).*?(?:pronounced|delivered|passed)", "type": "JUDGMENT"},
            {"pattern": r"(?:appeal|revision|writ).*?(?:filed|submitted|dismissed)", "type": "APPEAL_FILED"},
            {"pattern": r"(?:suit|petition|complaint).*?(?:filed|instituted|lodged)", "type": "SUIT_FILED"},
            {"pattern": r"(?:agreement|contract|deed).*?(?:executed|signed|entered)", "type": "AGREEMENT_SIGNED"},
            {"pattern": r"(?:notice|summons).*?(?:served|issued|delivered)", "type": "NOTICE_SERVED"},
            {"pattern": r"(?:license|permit|approval).*?(?:granted|issued|revoked)", "type": "LICENSE_ACTION"},
            {"pattern": r"(?:investigation|inquiry|probe).*?(?:initiated|commenced|started)", "type": "INVESTIGATION_STARTED"},
            {"pattern": r"(?:Section|Sec\.?)\s*(\d+).*?(?:IPC|Indian Penal Code)", "type": "IPC_SECTION"},
            {"pattern": r"(?:Article|Art\.?)\s*(\d+).*?(?:Constitution|constitutional)", "type": "CONSTITUTIONAL_ARTICLE"}
        ]
